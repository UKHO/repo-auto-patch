name: create-pr-work-item

on:
  workflow_call:
    inputs:
      pr-url:
        description: 'URL for the newly created PR.'
        required: true
        type: string
      ado-organisation:
        description: 'The organisation to use for the new work item.'
        required: false
        type: string
        default: 'ukhydro'
      ado-project:
        description: 'The project to use for the new work item.'
        required: false
        type: string
        default: 'Abzu'
      work-item-title:
        description: 'The title to use for the new work item. Defaults to PR URL if not provided.'
        required: false
        type: string
        default: ''
      work-item-area-path:
        description: 'The area to use for the new work item.'
        required: false
        type: string
        default: 'Abzu\Abzu Overall'
      work-item-iteration-path:
        description: 'The iteration to use for the new work item.'
        required: false
        type: string
        default: 'Abzu\Abzu Overall\Abzu Overall Kanban'
      work-item-description:
        description: 'The description for the new work item. The URL for the PR will be automatically added.'
        required: false
        type: string
        default: ''
      work-item-tags:
        description: 'Tags for the new work item. Multiple tags can be added using a semicolon separated list.'
        required: false
        type: string
        default: ''
    secrets:
      ado-pat:
        description: 'A PAT for creating a work item in Azure DevOps. Must have access to read and write work items.'
        required: true

env:
  TERM: xterm

jobs:

  create-pr-work-item-job:
    name: Create work item in Azure DevOps
    runs-on: ubuntu-latest
    # We don't want a fork of this repository to run this workflow.
    if: ${{ github.event.repository.fork == false }}

    steps:
    # Create a work item.
    - name: Create work item
      shell: pwsh
      id: createWorkItem
      run: |
        # Get the various inputs required for creating the work item.
        $pat = "${{ secrets.ado-pat }}"
        $authenticationHeader = @{ Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($pat)")) }
        $prUrl = "${{ inputs.pr-url }}"
        $inputTitle = "${{ inputs.work-item-title }}"
        $inputAreaPath = "${{ inputs.work-item-area-path }}"
        $inputIterationPath = "${{ inputs.work-item-iteration-path }}"
        $inputDescription = "${{ inputs.work-item-description }}"
        $inputTags = "${{ inputs.work-item-tags }}"

        # Set a default title if one wasn't supplied.
        [string]$title

        if ([string]::IsNullOrWhiteSpace($inputTitle)) {
          $title = "PR created - " + $prUrl
        } else {
          $title = $inputTitle
        }

        # Create the description. Include a link to the PR.
        $description = "<div>PR created - <a href=""" + $prUrl + """>" + $prUrl + "</a></div>"

        if (![string]::IsNullOrWhiteSpace($inputDescription)) {
          $description += "<div><br></div><div>" + $inputDescription + "</div>"
        }

        # Create the body of the request to set the various fields used to create the work item.
        $body = @(
          @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.Title"
            "value" = "$title"
          }
          @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.State"
            "value" = "Ready to Start"
          }
          @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.Description"
            "value" = "$description"
          }
          @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/Microsoft.VSTS.Common.AcceptanceCriteria"
            "value" = "<div>Pipeline build and test is successful.</div>"
          }
        )

        if (![string]::IsNullOrWhiteSpace($inputAreaPath)) {
          $body += @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.AreaPath"
            "value" = "$inputAreaPath"
          }
        }

        if (![string]::IsNullOrWhiteSpace($inputIterationPath)) {
          $body += @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.IterationPath"
            "value" = "$inputIterationPath"
          }
        }

        if (![string]::IsNullOrWhiteSpace($inputTags)) {
          $body += @{
            "from" = "null"
            "op" = "add"
            "path" = "/fields/System.Tags"
            "value" = "$inputTags"
          }
        }

        # Conver the array to JSON, set the URI and execute the request.
        $bodyJson = ConvertTo-Json -InputObject $body
        $uri = "https://dev.azure.com/${{ inputs.ado-organisation }}/${{ inputs.ado-project }}/_apis/wit/workitems/`$user%20story?api-version=7.0"
        $result = Invoke-RestMethod -Uri $uri -Method Post -Headers $authenticationHeader -ContentType "application/json-patch+json" -Body $bodyJson -StatusCodeVariable 'statusCode'

        if ($statusCode -ne 200) {
          throw "Azure API call failed - status code " + $statusCode
        }

        Write-Host 'Created work item' $result.id
        Write-Host $result.url

        Write-Output "## Work item $($result.id) created" >> $Env:GITHUB_STEP_SUMMARY
        Write-Output "Details:" >> $Env:GITHUB_STEP_SUMMARY
        Write-Output "$($result.url)" >> $Env:GITHUB_STEP_SUMMARY
