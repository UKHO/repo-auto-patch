name: update-dotnet-sdk

on:
  workflow_call:
    inputs:
      update-nuget-packages:
        description: 'If true, the workflow will update any NuGet packages to their latest minor versions.'
        required: false
        type: boolean
        default: true
      include-nuget-packages:
        description: 'A comma-separated list of NuGet package IDs (or substrings) to update, if update-nuget-packages is true.'
        required: false
        type: string
        default: 'Microsoft.AspNetCore,Microsoft.EntityFrameworkCore,Microsoft.Extensions,System.Text.Json'
      exclude-nuget-packages:
        description: 'A comma-separated list of NuGet package IDs (or substrings) to exclude from update, if update-nuget-packages is true.'
        required: false
        type: string
        default: ''
      user-email:
        description: 'The optional email address to use for the Git commits.'
        required: false
        type: string
        default: 'github-actions[bot]@users.noreply.github.com'
      user-name:
        description: 'The optional user name to use for the Git commits.'
        required: false
        type: string
        default: 'github-actions[bot]'
    outputs:
      branch-name:
        description: 'The name of the Git branch associated with the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.branch-name }}
      pull-request-html-url:
        description: 'The HTML URL of the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.pull-request-html-url }}
      pull-request-number:
        description: 'The number of the Pull Request created by the workflow if the .NET SDK is updated.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.pull-request-number }}
      sdk-updated:
        description: 'Whether the .NET SDK was updated by the workflow.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.sdk-updated }}
      sdk-version:
        description: 'The latest version of the .NET SDK for the specified channel when the workflow completed.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.sdk-version }}
      security:
        description: 'Whether any .NET SDK update includes security fixes.'
        value: ${{ jobs.update-dotnet-sdk-job.outputs.security }}

env:
  TERM: xterm

jobs:
  update-dotnet-sdk-job:
    name: Update .NET SDK
    runs-on: ubuntu-latest

    outputs:
      branch-name: ${{ steps.updateDotNetSdk.outputs.branch-name }}
      pull-request-html-url: ${{ steps.updateDotNetSdk.outputs.pull-request-html-url }}
      pull-request-number: ${{ steps.updateDotNetSdk.outputs.pull-request-number }}
      sdk-updated: ${{ steps.updateDotNetSdk.outputs.sdk-updated }}
      sdk-version: ${{ steps.updateDotNetSdk.outputs.sdk-version }}
      security: ${{ steps.updateDotNetSdk.outputs.security }}

    steps:
      # Checkout the repository.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Look for exactly one global.json file.
      - name: Find global.json
        shell: pwsh
        id: findGlobalJson
        env:
          BRANCH_NAME: ${{ steps.checkBranchName.outputs.BRANCH_NAME }}
          SKIP_PROCESSING: ${{ steps.checkBranchName.outputs.SKIP_PROCESSING }}
        run: |
          $ErrorActionPreference = "Stop"
          $globalJsonCount = 0
          $globalJsonFile = @()

          foreach ($item in Get-ChildItem -Path global.json -Recurse) {
            Write-Host "Found $item."
            $globalJsonFile = $item
            $globalJsonCount++
          }

          Write-Host "$globalJsonCount file`(s`) found."

          if ($globalJsonCount -eq 0) {
            Write-Host "global.json file not found."
            exit 1
          } elseif ($globalJsonCount -eq 1) {
            Write-Host "Using $globalJsonFile."
          } else {
            Write-Host "Multiple global.json files found."
            exit 1
          }

          Write-Output "GLOBAL_JSON_FILE=$($globalJsonFile)" >> $Env:GITHUB_OUTPUT

      # Run the action to check if a new version of the .NET SDK is available for the same release channel as the SDK specified in global.json.
      - name: Update .NET SDK
        id: updateDotnetSdk
        uses: martincostello/update-dotnet-sdk@1ae26d24c0d15d2f17f722c65886ffabff4f826a # v3.0.0
        env:
          GLOBAL_JSON_FILE: ${{ steps.findGlobalJson.outputs.GLOBAL_JSON_FILE }}
        with:
          global-json-file: ${{ steps.findGlobalJson.outputs.GLOBAL_JSON_FILE }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          user-email: ${{ inputs.user-email }}
          user-name: ${{ inputs.user-name }}

      # If the action updated the .NET SDK, and there's a request to update the packages, install the .NET SDK.
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        if: ${{ inputs.update-nuget-packages && steps.updateDotNetSdk.outputs.sdk-updated == 'true' }}
        env:
          GLOBAL_JSON_FILE: ${{ steps.findGlobalJson.outputs.GLOBAL_JSON_FILE }}
        with:
          global-json-file: ${{ steps.findGlobalJson.outputs.GLOBAL_JSON_FILE }}

      # If the action updated the .NET SDK, and there's a request to update the packages, run the dotnet-outdated-tool against the input list of packges.
      - name: Update NuGet packages
        if: ${{ inputs.update-nuget-packages && steps.updateDotNetSdk.outputs.sdk-updated == 'true' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tempPath = [System.IO.Path]::GetTempPath()
          $updatesPath = (Join-Path $tempPath "dotnet-outdated.json")

          # Install dotnet-outdated.
          dotnet tool install --global dotnet-outdated-tool

          Write-Host "Checking for updates."

          # Check for packages to include/exclude.
          $eligiblePackages = "${{ inputs.include-nuget-packages }}".Split(',')
          $ineligiblePackages = "${{ inputs.exclude-nuget-packages }}".Split(',')
          $includeExcludePackages = @()

          if (![string]::IsNullOrEmpty($eligiblePackages)) {
            foreach ($package in $eligiblePackages) {
              $includeExcludePackages += "--include"
              $includeExcludePackages += $package
            }
          }

          if (![string]::IsNullOrEmpty($ineligiblePackages)) {
            foreach ($package in $ineligiblePackages) {
              $includeExcludePackages += "--exclude"
              $includeExcludePackages += $package
            }
          }

          $aggregatedUpdates = @()

          # Run per project file, rather than for the full solution. This prevents errors if the solution contains an sqlproj, or if there are multiple solutions.
          foreach ($project in Get-ChildItem -Path *.csproj -Recurse) {
            if (Test-Path "$updatesPath") {
              Remove-Item "$updatesPath"
            }

            Write-Host "Processing $project."
            # Only update within the current major version.
            dotnet outdated --upgrade --version-lock Major --output "$updatesPath" $includeExcludePackages "$project"

            if (Test-Path "$updatesPath") {
              $aggregatedUpdates = @($aggregatedUpdates; Get-Content -Path "$updatesPath" | ConvertFrom-Json)
            }
          }

          # Determine the distinct set of package updates that were applied, if any.
          $dependencies = @()

          if ($aggregatedUpdates.Count -gt 0) {
            $dependencies = `
            $aggregatedUpdates | `
            Select-Object -ExpandProperty projects | `
            Select-Object -ExpandProperty TargetFrameworks | `
            Select-Object -ExpandProperty Dependencies | `
            Sort-Object -Property Name -Unique
          }

          if ($dependencies.Count -gt 0) {
            Write-Host "Found $($dependencies.Count) updates."

            # Generate the commit message.
            $lines = @()

            if ($dependencies.Count -eq 1) {
              $lines += "Bump .NET NuGet packages with 1 update"
              $lines += ""
              $lines += "Bump .NET NuGet packages with 1 update:"

            } else {
              $lines += "Bump .NET NuGet packages with $($dependencies.Count) updates"
              $lines += ""
              $lines += "Bump .NET NuGet packages with $($dependencies.Count) updates:"
            }

            $lines += ""

            foreach ($dependency in $dependencies) {
              $lines += "Update $($dependency.Name) from $($dependency.ResolvedVersion) to $($dependency.LatestVersion)."
            }

            $lines += ""
            $lines += "---"
            $lines += "updated-dependencies:"

            foreach ($dependency in $dependencies) {
              $lines += "- dependency-name: $($dependency.Name)"
              $lines += "  dependency-type: direct:production"
              $lines += "  update-type: version-update:semver-$($dependency.UpgradeSeverity.ToLowerInvariant())"
            }

            $lines += "..."
            $lines += ""

            $commitMessage = $lines -join "`n"

            git config user.email "${{ inputs.user-email }}"
            git config user.name "${{ inputs.user-name }}"

            git add .
            git commit -m $commitMessage -s
            git push
          } else {
            Write-Host "No updates found."
          }
